const {
  ApplicationCommandOptionType,
  ChatInputCommandInteraction,
} = require("discord.js");
const ApplicationCommand = require("../../structure/ApplicationCommand");
const DiscordBot = require("../../client/DiscordBot");
const Task = require("../../Models/Task");
const User = require("../../Models/User");
const { default: mongoose } = require("mongoose");

module.exports = new ApplicationCommand({
  command: {
    name: "task",
    description: "Task c·ªßa project",
    type: 1,
    options: [
      {
        name: "them",
        description: "Th√™m m·ªôt task m·ªõi",
        type: 1,
        options: [
          {
            name: "ten-task",
            description: "T√™n c·ªßa task",
            type: 3,
            required: true,
            min_length: 6,
          },
          {
            name: "mo-ta-task",
            description: "M√¥ t·∫£ c·ªßa task",
            type: 3,
            required: true,
          },
          {
            name: "project",
            description: "Task thu·ªôc project n√†o?",
            type: 3,
            required: true,
            autocomplete: true,
          },
          {
            name: "giao-viec",
            description:
              "Task n√†y s·∫Ω ƒë∆∞·ª£c giao cho ai?(D√πng mention ho·∫∑c nh·∫≠p UserID)",
            type: 9,
            required: true,
          },
          {
            name: "thoi-han",
            description:
              "Th·ªùi gian k·∫øt th√∫c task n√†y c√≤n ƒë∆∞·ª£c g·ªçi l√† deadline (dd/mm/yyyy HH:mm)",
            type: 3,
            required: true,
          },
          {
            name: "thoi-han-giao",
            description:
              "Th·ªùi gian giao b·∫Øt ƒë·∫ßu task n√†y c√≤n ƒë∆∞·ª£c g·ªçi l√† deadline (dd/mm/yyyy HH:mm)",
            type: 3,
            required: true,
          },
        ],
      },
      {
        name: "them-thanh-vien",
        description: "Th√™m th√†nh vi√™n v√†o task ƒë√£ t·∫°o",
        type: 1,
        options: [
          {
            name: "task",
            description: "Task c·∫ßn th√™m th√†nh vi√™n",
            type: 3,
            required: true,
          },
          {
            name: "thanh-vien",
            description: "Th√†nh vi√™n c·∫ßn th√™m v√†o task",
            type: 9,
            required: true,
          },
        ],
      },
    ],
  },
  options: {
    botOwner: true,
    guildOwner: true,
  },
  /**
   *
   * @param {DiscordBot} client
   * @param {ChatInputCommandInteraction} interaction
   */
  run: async (client, interaction) => {
    await interaction.deferReply();
    const subCommand = interaction.options.getSubcommand();
    if (subCommand === "them") {
      const nameTask = interaction.options.getString("ten-task");
      const descTask = interaction.options.getString("mo-ta-task");
      const projectIdStr = interaction.options.getString("project");
      const userTask = interaction.options.getMentionable("giao-viec");
      const deadlineStr = interaction.options.getString("thoi-han");
      const assignTimeStr = interaction.options.getString("thoi-han-giao");
      const assignerId = interaction.user.id;
      const projectId = new mongoose.Types.ObjectId(projectIdStr); // Chuy·ªÉn ƒë·ªïi projectId

      // H√†m chuy·ªÉn ƒë·ªïi chu·ªói th·ªùi gian sang Date
      function parseDate(dateStr) {
        const parts = dateStr.split(/[/ :]/);
        const day = parseInt(parts[0], 10);
        const month = parseInt(parts[1], 10) - 1;
        const year = parseInt(parts[2], 10);
        const hour = parseInt(parts[3], 10);
        const minute = parseInt(parts[4], 10);
        return new Date(year, month, day, hour, minute);
      }

      const deadline = parseDate(deadlineStr);
      const assignTime = parseDate(assignTimeStr);

      // Ki·ªÉm tra l·ªói
      if (isNaN(deadline.getTime()) || isNaN(assignTime.getTime())) {
        return interaction.editReply(
          "‚ùå ƒê·ªãnh d·∫°ng th·ªùi gian kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p theo d·∫°ng `dd/mm/yyyy HH:mm`."
        );
      }

      const user = await User.findOne({ userId: userTask.id });

      if (!user) {
        return interaction.editReply(
          "‚ùå Ng∆∞·ªùi n√†y ch∆∞a thu·ªôc h·ªá th·ªëng nh√≥m EMC!"
        );
      }

      const assigner = await User.findOne({ userId: assignerId });

      if (!assigner) {
        return interaction.editReply(
          "‚ùå Ng∆∞·ªùi giao vi·ªác n√†y ch∆∞a thu·ªôc h·ªá th·ªëng nh√≥m EMC!"
        );
      }

      try {
        const newTask = new Task({
          name: nameTask,
          description: descTask,
          projectId: projectId,
          userId: user._id,
          assigner: assigner._id,
          assignedTime: assignTime,
          deadline: deadline,
        });

        await newTask.save();
        await interaction.editReply(
          `‚úÖ Task **${nameTask}** ƒë√£ ƒë∆∞·ª£c t·∫°o v√† giao cho <@${userTask.id}>! 
           - üïí Giao v√†o: ${assignTime.toLocaleString("vi-VN")}
           - ‚è≥ Deadline: ${deadline.toLocaleString("vi-VN")}`
        );
      } catch (error) {
        console.error(error);
        await interaction.editReply("‚ùå ƒê√£ x·∫£y ra l·ªói khi t·∫°o task.");
      }
    }
  },
}).toJSON();
